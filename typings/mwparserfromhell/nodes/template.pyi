from collections.abc import Generator
from typing import Any, LiteralString, override

from mwparserfromhell.nodes import Node
from mwparserfromhell.nodes.extras.parameter import Parameter
from mwparserfromhell.wikicode import Wikicode

__all__ = ["Template"]
FLAGS = ...
_UNSET = ...

class Template(Node):
    def __init__(self, name: str, params: Any = ...) -> None: ...
    @override
    def __children__(self) -> Generator[Wikicode | Any, Any]: ...  # pyright: ignore[reportIncompatibleMethodOverride]
    @override
    def __strip__(self, **kwargs: Any) -> LiteralString | None: ...  # pyright: ignore[reportIncompatibleMethodOverride]
    @override
    def __showtree__(self, write: Any, get: Any, mark: Any) -> None: ...
    @override
    def __getitem__(self, name: str) -> Parameter: ...
    def __setitem__(self, name: str, value: str) -> Parameter: ...
    def __delitem__(self, param: str) -> None: ...
    @property
    def name(self) -> Wikicode: ...
    @property
    def params(self) -> list[Any]: ...
    @name.setter
    def name(self, value: str) -> None: ...
    def has(self, name: str, ignore_empty: bool = ...) -> bool: ...
    def has_param(self, name: str, ignore_empty: bool = ...) -> bool: ...
    def get(self, name: str, default: Any = ...) -> Parameter: ...
    def add(
        self, name: str, value: str, showkey: bool | None = ..., before: str = ..., preserve_spacing: bool = ...
    ) -> Parameter: ...
    def remove(self, param: str, keep_field: bool = ...) -> None: ...
