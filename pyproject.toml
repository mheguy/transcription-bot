[project]
name = "transcription-bot"
version = "0.0.1"
description = ""
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "beautifulsoup4>=4.12.3",
    "cronitor>=4.7.1",
    "dynaconf>=3.2.6",
    "feedparser>=6.0.11",
    "httpx>=0.27.2",
    "loguru>=0.7.2",
    "mutagen>=1.47.0",
    "mwparserfromhell>=0.6.6",
    "ngrok>=1.4.0",
    "numpy>=2.1.3",
    "openai>=1.54.4",
    "pandas>=2.2.3",
    "pyarrow>=18.0.0",
    "requests>=2.32.3",
    "sentry-sdk[loguru]>=2.18.0",
    "tenacity>=9.0.0",
    "tls-client>=1.0.1",
]

[dependency-groups]
dev = [
    "coverage>=7",
    "import-linter>=2",
    "pyright>=1",
    "pytest>=8",
    "pytest-icdiff>=0.9",
    "pytest-cov>=6",
    "pytest-randomly>=3",
    "pytest-socket>=0.7",
    "ruff>=0.8",
]
scripts = ["flask>=3", "pydub>=0.25"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.codespell]
skip = "uv.lock,pyproject.toml"

[tool.coverage]
xml.output = "cov.xml"

[tool.coverage.run]
branch = true
omit = ["transcription_bot/data/**", "tests/**"]
source = ["transcription_bot/"]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "NotImplementedError",
    "def __repr__",
    "if __name__ == .__main__.:",
]

[tool.importlinter]
root_package = "transcription_bot"
exclude_type_checking_imports = true

[[tool.importlinter.contracts]] # Package import structure
name = "Ensure package import structure"
type = "layers"
containers = ["transcription_bot"]
exhaustive = true
layers = [
    "entrypoints",
    "handlers",
    "parsers",
    "interfaces : serializers",
    "models",
    "utils",
]

[[tool.importlinter.contracts]] # Model import structure
name = "Ensure model import structure"
type = "layers"
containers = ["transcription_bot.models"]
exhaustive = true
layers = ["episode_data", "episode_segments", "data_models", "simple_models"]

[[tool.importlinter.contracts]] # Util import structure
name = "Ensure util import structure"
type = "layers"
containers = ["transcription_bot.utils"]
exhaustive = true
layers = [
    "helpers | templating",                      # Helpers
    "caching | webhook_server | issue_tracking", # Low level services
    "config : global_http_client",               # Low level objects & config
    "exceptions",                                # Custom exceptions
]

[[tool.importlinter.contracts]] # Entrypoint independence
name = "Entrypoint independence"
type = "independence"
modules = ["transcription_bot.entrypoints.*"]

[[tool.importlinter.contracts]] # Handler independence
name = "Handler independence"
type = "independence"
modules = ["transcription_bot.handlers.*"]

[[tool.importlinter.contracts]] # Interface independence
name = "Interface independence"
type = "independence"
modules = ["transcription_bot.interfaces.*"]

[tool.pyright]
exclude = ["**/.*", "**/node_modules", "**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true
enableReachabilityAnalysis = true
typeCheckingMode = "strict"
reportImplicitOverride = "information"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryTypeIgnoreComment = "information"

[tool.pytest]
ignore-glob = [".venv"]

[tool.pytest.ini_options]
addopts = ["--strict-markers", "--disable-socket"]
markers = []
filterwarnings = []
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
line-length = 120

[tool.ruff.analyze]
detect-string-imports = true

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # any-type - this is acceptable in some cases
    "D105",    # undocumented-magic-method - documenting magic methods is redundant
    "D107",    # undocumented-public-init - documenting init methods is redundant
    "DTZ",     # flake8-datetimez - we don't always want timezone-aware datetimes
    "EM",      # flake8-errmsg - tough to enforce
    "ERA",     # commented-out-code - sometimes commented out code is useful
    "FIX002",  # errors for todos
    "PLR0913", # too many arguments to function (including tests) - should not be a blocker
    "SIM108",  # ternaries make code harder to read, especially for new developers
    "TD",      # rules related to TODOs in code
    "T20",     # makes using print and pprint an error
    "TRY003",  # warns for long messages when raising exceptions rather than in the class

    # These are ignored because we use Ruff to format code.
    "COM812",
    "E501",

    # Doc rules.
    "D100", # public modules (I don't think this is necessary)

    # Project-specific rules.
    "TC001",
    "TC002",
    "TC003",
]
# Frustrating automatic fixes (ex. removing unused imports before you have a chance to use them)
unfixable = ["B007", "E712", "F401", "F841"]
exclude = [".venv"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = true
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase",
]
runtime-evaluated-decorators = ["pydantic.dataclasses.dataclass"]

[tool.ruff.lint.flake8-implicit-str-concat]
allow-multiline = false

[tool.ruff.lint.isort]
known-first-party = ["transcription_bot"]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
# Rules for notebooks:
"*.ipynb" = ["PLE1142", "PLR2004", "S101", "S311"]
# Rules for tests:
"{tests/**,testing_*.py}" = [
    "ANN201",
    "ANN401",
    "D10",
    "PGH",
    "PLR2004",
    "S101",
    "SLF",
    "TC001",
    "TC002",
    "TC003",
]
# Rules for stubs:
"**.pyi" = ["FBT001"]
# Rules for init files:
"__init__.py" = ["D10"]
# Project-specific rules:
# Each segment type does not need its own docstring.
"episode_segments.py" = [
    "D101",
    "D102", # public methods (this can be disabled if we can transition to py3.12 and use the override decorator)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.uv]
default-groups = ["dev", "scripts"]
