[project]
name = "transcription-bot"
version = "0.0.1"
description = ""
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "beautifulsoup4>=4.12.3",
    "dynaconf>=3.2.6",
    "feedparser>=6.0.11",
    "httpx>=0.27.2",
    "loguru>=0.7.2",
    "mutagen>=1.47.0",
    "ngrok>=1.4.0",
    "numpy>=2.1.3",
    "openai>=1.54.4",
    "pandas>=2.2.3",
    "pyarrow>=18.0.0",
    "requests>=2.32.3",
    "sentry-sdk>=2.18.0",
]

[dependency-groups]
dev = [
    "coverage",
    "pyright",
    "pytest",
    "pytest-icdiff",
    "pytest-cov",
    "pytest-randomly",
    "ruff",
]
scripts = ["flask", "pydub"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.codespell]
skip = "uv.lock,pyproject.toml"

[tool.coverage]
xml.output = "cov.xml"

[tool.coverage.run]
branch = true
omit = ["transcription_bot/data/**", "tests/**"]
source = ["transcription_bot/"]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "NotImplementedError",
    "def __repr__",
    "if __name__ == .__main__.:",
]

[tool.pyright]
exclude = ["**/.*", "**/node_modules", "**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true
enableReachabilityAnalysis = true
typeCheckingMode = "strict"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"

[tool.pytest]
ignore-glob = [".venv"]

[tool.pytest.ini_options]
addopts = ["--strict-markers"]
markers = []
filterwarnings = []
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
line-length = 120

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",  # missing-type-self - static analyzers infer the type of self
    "ANN102",  # missing-type-cls - static analyzers infer the type of cls
    "ANN401",  # any-type - this is acceptable in some cases
    "D105",    # undocumented-magic-method - documenting magic methods is redundant
    "D107",    # undocumented-public-init - documenting init methods is redundant
    "DTZ",     # flake8-datetimez - we don't always want timezone-aware datetimes
    "EM",      # flake8-errmsg - tough to enforce
    "ERA",     # commented-out-code - sometimes commented out code is useful
    "FIX002",  # errors for todos
    "PLR0913", # too many arguments to function (including tests) - should not be a blocker
    "PT004",   # missing-fixture-name-underscore - adding underscore to names means IDEs will show them as unused
    "SIM108",  # Ternaries make code harder to read, especially for new developers
    "TD",      # rules related to TODOs in code
    "T20",     # makes using print and pprint an error
    "TRY003",  # warns for long messages when raising exceptions rather than in the class

    # These are ignored because we use Ruff to format code.
    "COM812",
    "E501",
    "ISC001",

    # Doc rules.
    "D100", # public modules (I don't think this is necessary)
]
# Frustrating automatic fixes (ex. removing unused imports before you have a chance to use them)
unfixable = ["B007", "E712", "F401", "F841"]
exclude = [".venv"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = true
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase",
]

[tool.ruff.lint.isort]
known-first-party = ["transcription_bot"]

[tool.ruff.lint.per-file-ignores]
# Rules for notebooks:
"*.ipynb" = ["PLE1142", "PLR2004", "S101", "S311"]
# Rules for tests:
"tests/**" = [
    "ANN001",
    "ANN401",
    "D10",
    "PGH",
    "PLR2004",
    "S101",
    "SLF",
    "TCH001",
    "TCH002",
    "TCH003",
]
# Rules for init files:
"__init__.py" = ["D10"]
# Project-specific rules:
# Each segment type does not need its own docstring.
"episode_segments.py" = [
    "D101",
    "D102", # public methods (this can be disabled if we can transition to py3.12 and use the override decorator)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.uv]
default-groups = ["dev", "scripts"]
